프로그래밍을 분류하는 기준은 크게 3가지가 있는데요, 사람과 컴퓨터 중 어느 쪽이 더 이해하기 쉽게 만들었는지에 나뉘는 사용 주체에 따른 분류, 고급 언어를 어떻게 구동하는지에 나뉘는 실행에 따른 분류, 절차와 활동의 관점에 따라나뉘는 절차지향 언어와 객체지향 언어 이 세가지중 저는 절차지향과 객체지향 언어에 대해 조사해보았습니다
절차지향 언어는 일련의 처리절차를 정해진 문법에 따라 순서대로 기술하는 프로그래밍 방법이라고 정의되어 있습니다. 이 절차지향 언어는 프로시저라고 하는 루틴과 서브루틴, 메소드, 함수 등을 이용하여 프로그래밍합니다. 
절차지향의 대표적인 언어로는 먼저 C언어가 있습니다. C언어는 1972년에 개발된 언어로써 컴파일러 방식을 사용하고, 이식성이 좋아 어느 컴퓨터에서든지 프로그램 작성이 가능하다는 특징이 있습니다. 이외에도 파스칼, 비주얼 베이직, 포트란 언어들이 있습니다.
절차지향은 크게 2가지 특징이 있습니다. 하나는 위에서부터 아래로 물이 흐르듯 진행하는 형식인 TOP-DOWN 접근 방식을 이용하여 순차적으로 진행한다는 것이고, 또 하나는 전체의 기능을 하나의 함수로 구현하여 프로그램의 시작부터 순차적으로 코드를 실행한다는 것입니다. 
이러한 특징 덕분에 절차지향은 실행속도가 빠르다는 장점과 프로그래밍에 들이는 시간과 비용이 비교적 적다는 장점이 있습니다. 단점으로는 전체의 기능을 하나의 함수로 구현하기 때문에 버그 발생시 대처가 어렵다는 점과 코드의 순서만 변경되더라도 실행이 되지 않을 수 있다는 단점이 있습니다.
다음으로는 객체지향인데요 객체지향 언어는 프로그램을 다수의 독립적인 객체로 만들어 조립함으로써 서로 상호작용하도록 하는 프로그래밍 방법이라고 정의되어 있습니다. 이 객체의 상호작용은 데이터와 절차를 하나의 덩어리로 묶어서 생각하는 방법으로 컴퓨터의 부품 조립과 같은 개념이라고 생각하시면 이해가 쉽습니다. 
객체지향의 언어에는 대표적으로 자바가 있습니다. 자바는 간단하고, 코드의 가독성이 좋으며 보안이 강하고 개발자 커뮤니티가 활성화되어 있어 정보 습득이 용이한 장점이 있습니다. 이외에도 파이썬 루비, PHP 등의 언어가 있습니다. 
객체지향의 특징으로는 추상화, 캡슐화, 상속, 다형성이 있는데요, 추상화는 공통의 속성 기능을 묶어 이름을 붙이는 것입니다. 캡슐화는 객체의 변수 및 메소드를 외부 객체가 건드리지 못하도록 감싸는 보호막 같은 개념입니다. 상속은 부모 클래스의 변수와 메소드를 모두 자식 클래스가 물려받는 것을 의미합니다. 마지막으로 다형성은 하나의 객체가 여러 가지 타입을 가질 수 있는 것을 의미합니다.
객체지향은 여러 객체를 나눠 만들고 후에 다시 조립하여 상호작용하도록 만드는 복잡한 과정을 거치기 때문에 프로그램을 설계하는 데에 많은 시간과 비용이 소모되고, 같은 이유로 실행 시 처리 속도 역시 느려지게 됩니다. 하지만 생산성 증가, 높은 코드 재사용성, 비교적 유지보수를 손쉽게 할 수 있다는 장점이 있습니다.
두 언어를 비교해 보았는데요
그림을 보시면 자판기에서 음료수를 뽑아오는 과정이 절차지향에서는 간단하게 고객이 돈을 넣으면 자판기는 돈을 검수하고 제품과 거스름돈을 반환하고 고객은 잔돈과 제품을 받아가는 절차로 과정을 수행하게 되고 
객체지향에서는 고객은 돈을 넣거나 받거나 제품을 받는 등 세가지 동작을 수행할 수 있도록 설계하고 자판기는 돈을 받거나 검사하거나 잔돈을 주거나 제품을 주는 네가지 동작을 수행할 수 있도록 설계하여 고객과 자판기라는 두 객체가 서로 상호작용하여 과정을 수행하게 됩니다. 
절차지향에서는 각각의 과정, 절차 중심으로 프로그래밍이 되고, 객체지향에서는 어떤 객체가 어떤 동작을 수행하는지, 이 과정이 어떻게 상호작용되는지가 중심으로 프로그래밍이 됩니다.
